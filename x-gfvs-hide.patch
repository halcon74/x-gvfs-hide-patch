--- a/gio/gunixvolumemonitor.c	2020-11-04 00:14:13.000000000 +0300
+++ b/gio/gunixvolumemonitor.c	2020-11-07 21:47:50.170576897 +0300
@@ -35,6 +35,10 @@
 #include "giomodule.h"
 #include "glibintl.h"
 
+#include <stdio.h>
+#include <stdlib.h>
+#include <mntent.h>
+#include <limits.h>
 
 struct _GUnixVolumeMonitor {
   GNativeVolumeMonitor parent;
@@ -62,6 +66,8 @@
 							 "unix",
 							 0));
 
+#define MAX_USER_FORBIDDEN_MOUNTS_LENGTH 100
+
 static void
 g_unix_volume_monitor_finalize (GObject *object)
 {
@@ -314,6 +320,119 @@
   return NULL;
 }
 
+static int
+read_forbidden_mounts (char **array,
+                         unsigned int *ptr_length)
+{
+#ifdef HAVE_GETMNTENT_R
+  const char *read_file;
+  FILE *file;
+  struct mntent ent;
+  char buf[1024];
+  struct mntent *mntent;
+  char *mount_path;
+  unsigned int loop_i_mount = 0;
+  unsigned int failed_el_index = UINT_MAX;
+  unsigned int max_ptr_length = *ptr_length;
+  
+  *ptr_length = 0;
+  read_file = get_fstab_file ();
+  
+  file = setmntent (read_file, "r");
+  if (file == NULL)
+    {
+      g_log ("x-gvfs-hide-patch.test", G_LOG_LEVEL_WARNING, "CODE_FILE %s[%u]: "
+              "read_forbidden_mounts failed to read %s", __FILE__, __LINE__, read_file);
+      return 1;
+    }
+   
+  while ((mntent = getmntent_r (file, &ent, buf, sizeof (buf))) != NULL)
+    {
+      if (hasmntopt (mntent, "x-gvfs-hide") != NULL)
+        {
+          mount_path = mntent->mnt_dir;
+          if (loop_i_mount == max_ptr_length)
+            {
+              g_log ("x-gvfs-hide-patch.test", G_LOG_LEVEL_WARNING, "CODE_FILE %s[%u]: "
+                      "read_forbidden_mounts found more than %d (maximum allowed) entries in %s;"
+                      " all the entries starting with %s will NOT be used", __FILE__, __LINE__, 
+                      max_ptr_length, read_file, mount_path);
+              break;
+            }
+          if ((array[loop_i_mount] = strdup (mount_path)) == NULL)
+            {
+              g_log ("x-gvfs-hide-patch.test", G_LOG_LEVEL_WARNING, "CODE_FILE %s[%u]: "
+	              "read_forbidden_mounts failed to allocate memory", __FILE__, __LINE__);
+              failed_el_index = loop_i_mount;
+              break;
+            }
+          loop_i_mount++;
+        }
+    }
+
+  endmntent (file);
+
+  if (failed_el_index != UINT_MAX)
+    {
+      for (unsigned int loop_j = 0; loop_j < failed_el_index; loop_j++)
+        free (array[loop_j]);
+      return 1;
+    }
+  
+  *ptr_length = loop_i_mount;
+  return 0;
+#else
+  g_log ("x-gvfs-hide-patch.test", G_LOG_LEVEL_WARNING, "CODE_FILE %s[%u]: "
+          "read_forbidden_mounts can't find getmntent_r", __FILE__, __LINE__);
+  return 1;
+#endif
+}
+
+static int
+read_forbidden_volumes (char **array,
+                         unsigned int *ptr_length) 
+{
+  unsigned int length;
+  char *name;
+  unsigned int failed_el_index = UINT_MAX;
+  
+  if (read_forbidden_mounts (array, ptr_length) == 0)
+    {
+      length = *ptr_length;
+      for (unsigned int loop_i_volume = 0; loop_i_volume < length; loop_i_volume++)
+        {
+          if (strcmp (array[loop_i_volume], "/") == 0)
+            name = g_strdup (_("Filesystem root"));
+          else
+            name = g_filename_display_basename (array[loop_i_volume]);
+          
+          if (name == NULL)
+            {
+              g_log ("x-gvfs-hide-patch.test", G_LOG_LEVEL_WARNING, "CODE_FILE %s[%u]: "
+                      "read_forbidden_volumes failed to allocate memory", __FILE__, __LINE__);
+              failed_el_index = loop_i_volume;
+              break;
+            }
+          free (array[loop_i_volume]);
+          array[loop_i_volume] = name;
+        }
+      if (failed_el_index != UINT_MAX)
+        {
+          for (unsigned int loop_j = 0; loop_j < failed_el_index; loop_j++)
+            free (array[loop_j]);
+          return 1;
+        }
+      
+      return 0;
+    }
+  else
+    {
+      g_log ("x-gvfs-hide-patch.test", G_LOG_LEVEL_WARNING, "CODE_FILE %s[%u]: "
+              "read_forbidden_volumes failed to read forbidden mounts", __FILE__, __LINE__);
+      return 1;
+    }
+}
+
 static void
 update_volumes (GUnixVolumeMonitor *monitor)
 {
@@ -321,6 +440,12 @@
   GList *removed, *added;
   GList *l;
   GUnixVolume *volume;
+  char *user_forbidden_volumes[MAX_USER_FORBIDDEN_MOUNTS_LENGTH];
+  unsigned int user_forbidden_volumes_length = sizeof (user_forbidden_volumes) 
+          / sizeof (user_forbidden_volumes[0]);
+  unsigned int *ptr_user_forbidden_volumes_length = &user_forbidden_volumes_length;
+  const char *volume_name;
+  unsigned int found_user_forbidden_volume;
   
   new_mountpoints = g_unix_mount_points_get (NULL);
   
@@ -335,7 +460,7 @@
       GUnixMountPoint *mountpoint = l->data;
       
       volume = _g_unix_volume_monitor_lookup_volume_for_mount_path (monitor,
-                                                                    g_unix_mount_point_get_mount_path (mountpoint));
+                                                 g_unix_mount_point_get_mount_path (mountpoint));
       if (volume)
 	{
 	  _g_unix_volume_disconnected (volume);
@@ -352,10 +477,42 @@
       
       volume = _g_unix_volume_new (G_VOLUME_MONITOR (monitor), mountpoint);
       if (volume)
-	{
-	  monitor->volumes = g_list_prepend (monitor->volumes, volume);
-	  g_signal_emit_by_name (monitor, "volume-added", volume);
-	}
+        {          
+          if (read_forbidden_volumes (user_forbidden_volumes, ptr_user_forbidden_volumes_length) == 0)
+            {
+              volume_name = g_unix_mount_point_guess_name (mountpoint);
+              found_user_forbidden_volume = 0;
+              for (unsigned int loop_i_volume = 0; loop_i_volume < user_forbidden_volumes_length; 
+                      loop_i_volume++)
+                {
+                  if (!found_user_forbidden_volume && strcmp (volume_name, user_forbidden_volumes[loop_i_volume]) == 0)
+                    found_user_forbidden_volume = 1;
+		  free (user_forbidden_volumes[loop_i_volume]);
+                }
+              g_log ("x-gvfs-hide-patch.test", G_LOG_LEVEL_WARNING, "CODE_FILE %s[%u]: "
+                      "user %s volume_name: %s", __FILE__, __LINE__, 
+                      found_user_forbidden_volume? "forbidden": "allowed", volume_name);
+              free (volume_name);
+            }
+          else
+            {
+              g_log ("x-gvfs-hide-patch.test", G_LOG_LEVEL_WARNING, "CODE_FILE %s[%u]: "
+                      "update_volumes failed to read forbidden volumes", __FILE__, __LINE__);
+            }
+          
+          if (found_user_forbidden_volume)
+            // Free the resources that _g_unix_volume_new () allocated
+            {
+              _g_unix_volume_disconnected (volume);
+              g_object_unref (volume);
+            }
+          else
+            // Do whatever the unpatched code does
+            {
+              monitor->volumes = g_list_prepend (monitor->volumes, volume);
+              g_signal_emit_by_name (monitor, "volume-added", volume);
+            }
+        }
     }
   
   g_list_free (added);
@@ -400,7 +557,7 @@
   for (l = added; l != NULL; l = l->next)
     {
       GUnixMountEntry *mount_entry = l->data;
-
+      
       mount_path = g_unix_mount_get_mount_path (mount_entry);
       
       volume = _g_unix_volume_monitor_lookup_volume_for_mount_path (monitor, mount_path);
--- a/gio/gunixmounts.h	2020-11-04 01:33:38.000000000 +0300
+++ b/gio/gunixmounts.h	2020-11-04 01:37:00.000000000 +0300
@@ -64,6 +64,8 @@
 #define G_IS_UNIX_MOUNT_MONITOR_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), G_TYPE_UNIX_MOUNT_MONITOR))
 G_DEFINE_AUTOPTR_CLEANUP_FUNC(GUnixMountMonitor, g_object_unref)
 
+GLIB_AVAILABLE_IN_2_64
+char *   get_fstab_file            (void);
 GLIB_AVAILABLE_IN_ALL
 void           g_unix_mount_free                    (GUnixMountEntry    *mount_entry);
 GLIB_AVAILABLE_IN_2_54
--- a/gio/gunixmounts.c	2020-11-04 01:38:57.000000000 +0300
+++ b/gio/gunixmounts.c	2020-11-04 01:37:49.000000000 +0300
@@ -968,7 +968,7 @@
  * don't return swap and ignore mounts.
  */
 
-static char *
+char *
 get_fstab_file (void)
 {
 #ifdef HAVE_LIBMOUNT
