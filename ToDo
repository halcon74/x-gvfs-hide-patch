==================================
ISSUES FOUND BY GENTOO FORUM USERS
==================================

*
	DURING ALL THE WORK:
	https://developer.gnome.org/programming-guidelines/stable/c-coding-style.html.en
1 CLOSED RESOLVED
	should not declare a non-static function in a source file
		see NOTE 2
2 CLOSED RESOLVED
	use __FILE__ and/or __LINE__ in openlog
		see NOTE 2
3 CLOSED RESOLVED
	move the code inside if(volume) and if(mount)
	fixed in the GDH-Gentoo's code -- for volumes
4 CLOSED RESOLVED
	strstr will suppress /home/me/variables too, not only /var
5
	volume = _g_unix_volume_new could leak the underlying object whenever the new code suppresses adding it to the list
	fixed in the GDH-Gentoo's code -- stub
6 CLOSED RESOLVED
	don't need to use a memset then strcat -- just use strcpy
	look at the printf family of functions
	syslog functions take a 'printf'-style format string
	?: in one syslog instead of two syslogs
	fixed in the GDH-Gentoo's code -- for volumes
		see NOTE 2
7 CLOSED RESOLVED
	const pointer to const char
8 CLOSED RESOLVED
	declare the loop counters in the for loops
	fixed in the GDH-Gentoo's code -- for volumes
9 CLOSED WONTFIX
	move declarations of objects with automatic storage duration close to the first place they are used
	fixed in the GDH-Gentoo's code -- for volumes
		see NOTE 3
10 CLOSED RESOLVED
	replace the hardcoded lists with reading a text file - the same /etc/fstab or other
11
	what could be moved to separate functions?
	g_log?
12
	at the end again:
	https://developer.gnome.org/programming-guidelines/stable/c-coding-style.html.en
13 IN PROGRESS
	try gdb
		see NOTE 5
14 IN PROGRESS
	try valgrind
		see NOTE 6
	
======================
ISSUES FOUND BY MY OWN
======================

15 CLOSED RESOLVED
	volume_name = g_volume_get_name (volume)
	sometimes leads to compile error
	expected GVolume aka struct _GVolume but argument is of type GUnixVolume aka struct _GUnixVolume
	was not found earlier because arises _sometimes_
16 CLOSED INVALID
	forbidding mounts seems to be useless:
	
	if a volume is not mounted
		its path is not passed to mounts
	if a volume is mounted
		its path is passed to mounts, but
		if the corresponding volume name is not forbidden
			the mount is displayed in the dialogue anyway
	
		see NOTE 4
17 CLOSED RESOLVED
	replace two forbidding lists with one
		see NOTE 4
18 CLOSED INVALID
	CODE_FILE ../glib-2.64.5/gio/gunixvolumemonitor.c[503]:user allowed volume_name: ?????? ???????? ???????
	?????? ???????? ??????? - it's "Filesystem root" in Russian
		see NOTE 7
19
	Forbidden volumes seem NOT to be passed to mounts... Again: does it make sense to forbid mounts? :)

NOTES

1
	NOT ACTUAL ANYMORE!
2
	syslog is not used in glib logging
	https://blog.gtk.org/2017/05/04/logging-and-more/
g_log_structured (G_LOG_DOMAIN,
                  G_LOG_LEVEL_DEBUG,
                  "CODE_FILE", "mysource.c",
                  "CODE_LINE", 312,
                  "MESSSAGE_ID", "06d4df59e6c24647bfe69d2c27ef0b4e",
                  "MESSAGE", "You have %d eggs", 12 + 2);
	you can still use printf-style formatting for the MESSAGE field
3
	ISO C90 forbids mixed declarations and code
4
	I think, the code that forbids mounts should not be removed even if forbidding mounts seems useless - for purposes of glib lists consistency
	For the same purposes, I think, there should be only one forbidding list -- for example, of forbidden mount paths; volume names should be derived from it
	How that (deriving) is made in glib:
	
	gio/gunixvolume.c::_g_unix_volume_new:
	volume->name = g_unix_mount_point_guess_name (mountpoint);
	
	gio/gunixmounts.c::g_unix_mount_point_guess_name:
	name = g_filename_display_basename (mount_point->mount_path);
	
	glib/gconvert.c::
gchar *
g_filename_display_basename (const gchar *filename)
{
  char *basename;
  char *display_name;

  g_return_val_if_fail (filename != NULL, NULL);
  
  basename = g_path_get_basename (filename);
  display_name = g_filename_display_name (basename);
  g_free (basename);
  return display_name;
}
5
	I've used gdb for the standalone pass-ptr...
	But how to use gdb for the final glib binary?
6
	I've used valgrind for the standalone pass-ptr...
	But how to use valgrind for the final glib binary?
7
	It's an issue of terminal, not of the program
